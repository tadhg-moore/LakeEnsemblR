install.packages("FME")
install.packages("deSolve")
library(devtools)
rprofile_path = file.path(Sys.getenv("HOME"),
".Rprofile")
write(’\noptions(repos=c(getOption(\’repos\’),
CRAN=\’https://cloud.r-project.org\’,
USGS=\’https://owi.usgs.gov/R\’))\n’,
rprofile_path,
append = TRUE)
cat(’Your Rprofile has been updated to include GRAN.
Please restart R for changes to take effect.’)
install.packages("glmtools")
rprofile_path = file.path(Sys.getenv("HOME"),
".Rprofile")
write('\noptions(repos=c(getOption(\'repos\'),
CRAN=\'https://cloud.r-project.org\',
USGS=\'https://owi.usgs.gov/R\'))\n',
rprofile_path,
append = TRUE)
cat('Your Rprofile has been updated to include GRAN.
Please restart R for changes to take effect.')
install.packages("glmtools")
install.packages("glmtools")
library(GLMr)
glm_version()
glm_version()
library(GLMr)
?run_glm
?system
?system2
shiny::runApp('Documents/R/shiny/simple_1')
runApp('Documents/R/shiny/simple_1')
install.packages("RPostgreSQL")
require("RPostgreSQL")
install.packages("RPostgreSQL")
require("RPostgreSQL")
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"rasberryMSQL"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "pi",
host = "192.168.2.139", port = 5432,
user = "pi", password = pw)
rm(pw) # removes the password
# check for the cartable
dbExistsTable(con, "cartable")
# TRUE
# creates df, a data.frame with the necessary columns
data(mtcars)
df <- data.frame(carname = rownames(mtcars),
mtcars,
row.names = NULL)
df$carname <- as.character(df$carname)
rm(mtcars)
# writes df to the PostgreSQL database "postgres", table "cartable"
dbWriteTable(con, "cartable",
value = df, append = TRUE, row.names = FALSE)
# query the data from postgreSQL
df_postgres <- dbGetQuery(con, "SELECT * from cartable")
df_postgres
# compares the two data.frames
identical(df, df_postgres)
# Basic Graph of the Data
require(ggplot2)
ggplot(df_postgres, aes(x = as.factor(cyl), y = mpg, fill = as.factor(cyl))) +
geom_boxplot() + theme_bw()
install.packages("ggplot2")
# get info from db
dbGetInfo(con)
# list available tables
dbListTables(con)
# Basic Graph of the Data
require(ggplot2)
# Basic Graph of the Data
ggplot(df_postgres, aes(x = as.factor(cyl), y = mpg, fill = as.factor(cyl))) +
geom_boxplot() + theme_bw()
# query the data from postgreSQL
df_postgres <- dbGetQuery(con, "SELECT * from einkaufslite")
df_postgres
# add entry to table
dbAppendTable(con,"einlkauslite",data.frame(name = "Hannes",
item =  "Test item 2",
price = 13.4,
date = as.Date("2019-05-12")))
# add entry to table
dbAppendTable(con,"einkaufslite",data.frame(name = "Hannes",
item =  "Test item 2",
price = 13.4,
date = as.Date("2019-05-12")))
data.frame(name = "Hannes",
item =  "Test item 2",
price = 13.4,
date = as.Date("2019-05-12")
)
item2 <- df_postgres
item2$item <- "item 2"
item2$price <- 12.34
# add entry to table
dbAppendTable(con,"einkaufslite",item2)
# add entry to table
dbWriteTable(con,"einkaufslite",item2,append = TRUE)
item2
# add entry to table
dbWriteTable(con,"einkaufslite",data.frame(name = "Hannes",
item =  "Test item 2",
price = 13.4,
date = as.Date("2019-05-12"),
row.names = FALSE),append = TRUE)
# add entry to table
dbWriteTable(con,"einkaufslite",data.frame(name = "Hannes",
item =  "Test item 2",
price = 13.4,
date = as.Date("2019-05-12")),
row.names = FALSE,append = TRUE)
# list available tables
dbListTables(con)
# query the data from postgreSQL
dbGetQuery(con, "SELECT * from einkaufslite")
shiny::runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
today_ch <- as.POSIXct(date())
date()
today_ch <- as.POSIXct(date(),format="%a %b %d %H %Y")
today_ch
as.POSIXct(date(),format="%a %b %d %H %Y")
format(as.POSIXct("2019-02-03"),format="%a %b %d %H %Y")
today_ch <- as.POSIXct(date(),format="%a %b %d %T %Y")
today_ch
format(as.POSIXct("2019-02-03"),format="%a %b %d %T %Y")
format(as.POSIXct("2019-05-14"),format="%a %b %d %T %Y")
Sys.Date()
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"rasberryMSQL"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "pi",
host = "192.168.2.139", port = 5432,
user = "pi", password = pw)
rm(pw) # removes the password
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"rasberryMSQL"
}
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "pi",
host = "192.168.2.138", port = 5432,
user = "pi", password = pw)
rm(pw) # removes the password
# check for the cartable
dbExistsTable(con, "cartable")
# get info from db
dbGetInfo(con)
# list available tables
dbListTables(con)
# query the data from postgreSQL
dbGetQuery(con, "SELECT * from einkaufslite")
# close the connection
dbDisconnect(con)
dbUnloadDriver(drv)
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
runApp('ownCloud/shiny_ekl')
library(rLakeAnalyzer)
citation("GLM3r")
Iopt <- 17
mu <- (I/Iopt) * exp(1 - (I/Iopt))
mu_mon <- I/(I + 17)
plot(I, mu_mon, "l")
I <- seq(0, 350, by = 0.1)
mu <- (I/Iopt) * exp(1 - (I/Iopt))
mu_mon <- I/(I + 17)
plot(I, mu_mon, "l")
mu <- (I/Iopt) * exp(1 - (I/Iopt))
lines(I, mu, col = 2)
Iopt <- 40
plot(I, mu_mon, "l")
lines(I, mu, col = 2)
Iopt <- 60
mu <- (I/Iopt) * exp(1 - (I/Iopt))
mu_mon <- I/(I + 17)
plot(I, mu_mon, "l")
lines(I, mu, col = 2)
Iopt <- 70
mu <- (I/Iopt) * exp(1 - (I/Iopt))
mu_mon <- I/(I + 17)
plot(I, mu_mon, "l")
lines(I, mu, col = 2)
vignette(LakeEnsemblR)
vignette()
library(devtools)
install_github("aemon-j/LakeEnsemblR", build_vignettes = T)
vignette()
vignette(LakeEnsemblR_vignette)
vignette("LakeEnsemblR_vignette")
citation(MyLakeR)
citation("MyLakeR")
citation("SimstratR")
citation("FLakeR")
citation("GOTMr")
setwd("~/Documents/Promotion/AEMONj/Software_projects/lakeensemblr/Test_LakeEnsemblR/example/feeagh")
config_file <- "LakeEnsemblR.yaml"
##-------------Read settings---------------
# Use inflows
use_inflows <- get_yaml_value(config_file, "inflows", "use_inflows")
library(gotmtools)
library(LakeEnsemblR)
##-------------Read settings---------------
# Use inflows
use_inflows <- get_yaml_value(config_file, "inflows", "use_inflows")
get_template()
get_template("LakeEnsemblR_config")
setwd("/mnt/5784eed2-67de-4788-8545-c30359ba5445/Documents/Promotion/AEMONj/Software_projects/lakeensemblr/LakeEnsemblR/inst/extdata/feeagh")
detach("package:LakeEnsemblR", unload = TRUE)
detach("package:gotmtools", unload = TRUE)
library(gotmtools)
library(LakeEnsemblR)
setwd("/mnt/5784eed2-67de-4788-8545-c30359ba5445/Documents/Promotion/AEMONj/Software_projects/lakeensemblr/Test_LakeEnsemblR")
#initial clean up
rm(list = ls())
graphics.off()
cat("\f")
# set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(devtools)
#install_github("aemon-j/lakeensemblr", build_vignette = TRUE, ref = "devel")
#install_github("aemon-j/FLakeR", ref = "inflow")
#install_github("aemon-j/gotmr")
#install_github("gleon/glm3r")
#install_github("aemon-j/simstratr")
#install_github("aemon-j/mylaker")
# Load libraries
#library(gotmtools)
library(LakeEnsemblR)
library(ggpubr)
library(ggplot2)
#library(reshape2)# Copy template folder
template_folder <- system.file("extdata/feeagh", package= 'LakeEnsemblR')
dir.create('example') # Create example folder
file.copy(from = template_folder, to = 'example', recursive = TRUE)
setwd('example/feeagh') # Change working directory to example folder
# Set config file
config_file <- 'LakeEnsemblR.yaml'
model <- c("FLake", "GLM", "GOTM", "Simstrat", "MyLake")
# 1. Example - creates directories with all model setup
export_config(config_file = config_file, model = c("FLake", "GLM", "GOTM", "Simstrat", "MyLake"),
folder = ".")
label <- "location"
key <- "depth"
yml <- readLines(file)
file <- "LakeEnsemblR.yaml"
yml <- readLines(file)
# Prevent from finding labels/keys in comments
yml_no_comments <- unname(sapply(yml, function(x) strsplit(x, "#")[[1]][1]))
#Find index of label
if(is.null(label)){
ind_label = 0
}else{
label_id <- paste0(label,':')
ind_label <- grep(paste0("\\b", label_id, "\\b"), yml_no_comments)
if(length(ind_label) == 0){
stop(label, ' not found in ', file)
}
}
#Find index of key to replace
key_id <- paste0(' ',key, ':')
ind_key = grep(paste0("\\b", key_id, "\\b"), yml_no_comments)
ind_key
#Find index of key to replace
key_id <- paste0(' ',key, ':')
key_id
label_id
ind_label
#Find index of key to replace
key_id <- paste0(key, ':')
key_id
ind_key = grep(paste0("\\b", key_id, "\\b"), yml_no_comments)
ind_key
yml_no_comments
key_id
paste0("\\b", key_id, "\\b")
grep(paste0("\\b", key_id, "\\b"), yml_no_comments)
#Find index of key to replace
key_id <- paste0('   ',key, ':')
ind_key = grep(paste0("\\b", key_id, "\\b"), yml_no_comments)
ind_key
#Find index of key to replace
key_id <- paste0('   ',key, ':')
ind_key = grep(paste0("\\b", key_id, "\\b"), yml_no_comments)
ind_key = grep(paste0("\\b", key_id, "\\b"), yml_no_comments)
#Find index of key to replace
key_id <- paste0('   ',key, ':')
key_id
#Find index of key to replace
key_id <- paste0('   ',key, ':')
ind_key <- grep(key_id, yml_no_comments)
ind_key
ind_key <- ind_key[ind_key > ind_label]
ind_map <- ind_key[which.min(ind_key - ind_label)]
ind_map
ind_key
detach("package:LakeEnsemblR", unload = TRUE)
detach("package:gotmtools", unload = TRUE)
#initial clean up
rm(list = ls())
graphics.off()
cat("\f")
# set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(devtools)
#install_github("aemon-j/lakeensemblr", build_vignette = TRUE, ref = "devel")
#install_github("aemon-j/FLakeR", ref = "inflow")
#install_github("aemon-j/gotmr")
#install_github("gleon/glm3r")
#install_github("aemon-j/simstratr")
#install_github("aemon-j/mylaker")
# Load libraries
#library(gotmtools)
library(LakeEnsemblR)
library(ggpubr)
library(ggplot2)
#library(reshape2)# Copy template folder
template_folder <- system.file("extdata/feeagh", package= 'LakeEnsemblR')
dir.create('example') # Create example folder
file.copy(from = template_folder, to = 'example', recursive = TRUE)
setwd('example/feeagh') # Change working directory to example folder
# Set config file
config_file <- 'LakeEnsemblR.yaml'
model <- c("FLake", "GLM", "GOTM", "Simstrat", "MyLake")
# 1. Example - creates directories with all model setup
export_config(config_file = config_file, model = c("FLake", "GLM", "GOTM", "Simstrat", "MyLake"),
folder = ".")
# 2. Run ensemble lake models
wtemp_list <- run_ensemble(config_file = config_file,
model = c("FLake", "GLM", "GOTM", "Simstrat", "MyLake"),
return_list = TRUE, parallel = TRUE)
## Plot model output using gotmtools/ggplot2
# Extract names of all the variables in netCDF
ncdf <- 'output/ensemble_output.nc'
vars <- gotmtools::list_vars(ncdf)
vars # Print variables
p1 <- plot_heatmap(ncdf) +
scale_colour_gradientn(limits = c(0, 21),
colours = rev(RColorBrewer::brewer.pal(11, "Spectral")))
p1
# Plot ensemble mean at 0.9m
plot_ensemble(ncdf = ncdf, model = model, var = 'temp', depth = 0.9, boxwhisker = T,
residuals = T)
setwd("/mnt/5784eed2-67de-4788-8545-c30359ba5445/Documents/Promotion/AEMONj/Software_projects/lakeensemblr/LakeEnsemblR/inst/extdata/feeagh")
##-------------Read settings---------------
# Use inflows
use_inflows <- get_yaml_value(config_file, "inflows", "use")
library(gotmtools)
##-------------Read settings---------------
# Use inflows
use_inflows <- get_yaml_value(config_file, "inflows", "use")
# Use outflows
use_outflows <- get_yaml_value(config_file, "outflows", "use")
use_inflows
use_outflows
# number of outflows
num_outflows <- get_yaml_value(config_file, "ouflows", "number_outflows")
# Use outflows
use_outflows <- get_yaml_value(config_file, "outflows", "use")
use_outflows
# number of outflows
num_outflows <- get_yaml_value(config_file, "outflows", "number_outflows")
num_outflows
# outflow depths
lvl_outflows <- get_yaml_value(config_file, "outflows", "outflow_lvl")
lvl_outflows
# number of outflows
num_outflows <- get_yaml_value(config_file, "outflows", "number_outflows")
num_outflows
# outflow depths
lvl_outflows <- get_yaml_value(config_file, "outflows", "outflow_lvl")
lvl_outflows
# Get scaling parameter
scale_param_out <- get_yaml_value(config_file, "outflows", "scale_param")
scale_param_out
infl <- read.csv("LakeEnsemblR_inflow_standard.csv")
View(infl)
outfl <- infl
outfl <- outfl[, 1:2]
outfl$Flow_metersCubedPerSecond <- outfl$Flow_metersCubedPerSecond/2
outfl$Flow_metersCubedPerSecond_2 <- outfl$Flow_metersCubedPerSecond
nms <- colnames(outfl)
colnames(outfl)
colnames(outfl)[2]
colnames(outfl)[2] <- "Flow_metersCubedPerSecond_1"
View(outfl)
data(LakeEnsemblR)
var_names_dic
lake_var_dic
scale_param_out
# Get start & stop dates
start_date <- get_yaml_value(config_file, "time", "start")
stop_date <- get_yaml_value(config_file, "time", "stop")
# Get scaling parameter
scale_param_inf <- get_yaml_value(config_file, "inflows", "scale_param")
fla_fil <- file.path(folder, get_yaml_value(config_file, "config_files", "FLake"))
fla_fil
folder <- "."
fla_fil <- file.path(folder, get_yaml_value(config_file, "config_files", "FLake"))
fla_fil
glm_nml <- file.path(folder, get_yaml_value(config_file, "config_files", "GLM"))
glm_nml
# number of inflows
num_inflows <- get_yaml_value(config_file, "inflows", "number_inflows")
num_inflows
outflow_file <- get_yaml_value(file = config_file, label = "outflows", key = "file")
outflow_file
